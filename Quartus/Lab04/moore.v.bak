`define INIT 4'b0000
`define ONE 4'b0001
`define TWO 4'b0010
`define THREE 4'b0011
`define FOUR 4'b0100
`define FIVE 4'b0101
`define SIX 4'b0110
`define SEVEN 4'b0111
`define EIGHT 4'b1000

module moore(nRESET, CLK, in, out);
	input nRESET, CLK, in;
	output out;
	reg [3:0] curState, nextState;
	reg out;
	
	always @ (posedge CLK or negedge nRESET)
		if (!nRESET) curState <= `INIT;
		else curState <= nextState;
	
	always @ (curState or in)
		casex(curState)
		
			`INIT: begin
				if (in == 1)
					nextState = `ONE;
				else
					nextState = `FIVE;
				out = 1'b0;
			end
			`ONE: begin
				if (in == 1)
					nextState = `TWO;
				else
					nextState = `INIT;
				out = 1'b0;
			end
			`TWO: begin
				if (in == 1)
					nextState = `THREE;
				else
					nextState = `INIT;
				out = 1'b0;
			end
			`THREE: begin
				if (in == 1)
					nextState = `FOUR;
				else
					nextState = `INIT;
				out = 1'b0;
			end
			`FOUR: begin
				if (in == 1)
					nextState = `FOUR;
				else
					nextState = `INIT;
				out = 1'b1;
			end
			`FIVE: begin
				if (in == 0)
					nextState = `SIX;
				else
					nextState = `INIT;
				out = 1'b0;
			end
			`SIX: begin
				if (in == 0)
					nextState = `SEVEN;
				else
					nextState = `INIT;
				out = 1'b0;
			end
			`SEVEN: begin
				if (in == 0)
					nextState = `EIGHT;
				else
					nextState = `INIT;
				out = 1'b0;
			end
			`EIGHT: begin
				if (in == 0)
					nextState = `EIGHT;
				else
					nextState = `INIT;
				out = 1'b1;
			end
		endcase
endmodule

			