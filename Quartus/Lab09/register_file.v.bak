module register_file (clk, nRESET, write_enable, write_addr, write_data, read_addr_A, read_addr_B, read_data_A, read_data_B);
	input clk;
	input nRESET;
	input write_enable;
	input [2:0] write_addr;
	input [15:0] write_data;
	
	input [2:0] read_addr_A;
	input [2:0] read_addr_B;
	input [2:0] read_addr_D;
	
	output [15:0] read_data_A;
	output [15:0] read_data_B;
	output [15:0] read_addr_D;
	
	reg [15:0] reg_0;
	reg [15:0] reg_1;
	reg [15:0] reg_2;
	reg [15:0] reg_3;
	reg [15:0] reg_4;
	reg [15:0] reg_5;
	reg [15:0] reg_6;
	reg [15:0] reg_7;
	
	wire [3:0] decoder_out;
	wire [3:0] reg_enable;
	
	assign decoder_out = 
		(write_addr == 2’b00) ? 4’b0001 :
		(write_addr == 2’b01) ? 4’b0010 :
		(write_addr == 2’b10) ? 4’b0100 :
		(write_addr == 2’b11) ? 4’b1000 : 4’bx;
		
	assign reg_enable[0] = write_enable & decoder_out[0];
	assign reg_enable[1] = write_enable & decoder_out[1];
	assign reg_enable[2] = write_enable & decoder_out[2];
	assign reg_enable[3] = write_enable & decoder_out[3];
	
	always @ (posedge clk or negedge nRESET) 
		if (!nRESET) reg_0 <= 8'b0;
		else if (reg_enable[0]) reg_0 <= write_data;
	always @ (posedge clk or negedge nRESET) 
		if (!nRESET) reg_1 <= 8'b0;
		else if (reg_enable[1]) reg_1 <= write_data;
	always @ (posedge clk or negedge nRESET) 
		if (!nRESET) reg_2 <= 8'b0;
		else if (reg_enable[2]) reg_2 <= write_data;
	always @ (posedge clk or negedge nRESET) 
		if (!nRESET) reg_3 <= 8'b0;
		else if (reg_enable[3]) reg_3 <= write_data;
	
	assign read_data_A = (read_addr_A == 2'b00) ? reg_0 :
	(read_addr_A == 2'b01) ? reg_1 :
	(read_addr_A == 2'b10) ? reg_2 :
	(read_addr_A == 2'b11) ? reg_3 : 8'bx;
	
	assign read_data_B = (read_addr_B == 2'b00) ? reg_0 :
	(read_addr_B == 2'b01) ? reg_1 :
	(read_addr_B == 2'b10) ? reg_2 :
	(read_addr_B == 2'b11) ? reg_3 : 8'bx;
endmodule
